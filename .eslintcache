[{"/Users/kazu150/Documents/90_menta/13_todo/src/index.js":"1","/Users/kazu150/Documents/90_menta/13_todo/src/components/TodoList.js":"2","/Users/kazu150/Documents/90_menta/13_todo/src/components/App.js":"3","/Users/kazu150/Documents/90_menta/13_todo/src/components/FormDialog.js":"4","/Users/kazu150/Documents/90_menta/13_todo/src/components/Todo.js":"5"},{"size":218,"mtime":1609148816753,"results":"6","hashOfConfig":"7"},{"size":1388,"mtime":1609234802597,"results":"8","hashOfConfig":"7"},{"size":1077,"mtime":1609237162747,"results":"9","hashOfConfig":"7"},{"size":5360,"mtime":1609237684645,"results":"10","hashOfConfig":"7"},{"size":1149,"mtime":1609237519236,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1h8givi",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/kazu150/Documents/90_menta/13_todo/src/index.js",[],["24","25"],"/Users/kazu150/Documents/90_menta/13_todo/src/components/TodoList.js",[],"/Users/kazu150/Documents/90_menta/13_todo/src/components/App.js",[],"/Users/kazu150/Documents/90_menta/13_todo/src/components/FormDialog.js",["26"],"import React, { useContext, useState } from 'react';\nimport {TodoContext} from './App';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\n\nconst FormDialog = () => {\n    const { rows, setRows, open, setOpen, selectedTodo, setSelectedTodo, status, setStatus } = useContext(TodoContext);\n\n    const handleChange = (event) => {\n        setStatus(event.target.value);\n    };\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n        setSelectedTodo({})\n    };\n\n    const onTodoSubmit = (e) => {\n        e.preventDefault();\n        if (!selectedTodo.title) {\n            alert('タイトルを入力してください')\n            return\n        }\n        if (!selectedTodo.limit) {\n            alert('期限を入力してください')\n            return\n        }\n\n        if(selectedTodo.id){\n            const newRows = rows.filter(row => row.id !== selectedTodo.id)\n            const newSelectedTodo = {...selectedTodo}\n            newSelectedTodo.status = status\n            setRows([...newRows, newSelectedTodo])\n\n        } else {\n            setRows([...rows, { \n                title: selectedTodo.title, \n                limit: selectedTodo.limit, \n                status: status\n            }]);\n        }        \n\n        setSelectedTodo({});\n        handleClose();\n    }\n\n    const onTodoDelete = () => {\n        setRows(\n            rows.filter(row => row !== selectedTodo)\n        )\n        handleClose()\n    }\n\n    const useStyles = makeStyles((theme) => ({\n        container: {\n            display: 'flex',\n            flexWrap: 'wrap',\n        },\n        textField: {\n            marginLeft: theme.spacing(1),\n            marginRight: theme.spacing(1),\n            width: 200,\n        },\n    }));\n\n    const classes = useStyles();\n\n\n    return (\n        <div>\n            <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\n                TODOを登録する\n            </Button>\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"form-dialog-title\">TODO</DialogTitle>\n                <DialogContent className={classes.container}>\n                    <DialogContentText>\n                        TODOを編集します\n                    </DialogContentText>\n                    <TextField\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"title\"\n                        label=\"タイトル\"\n                        type=\"text\"\n                        value={selectedTodo.title}\n                        onChange={e => setSelectedTodo({\n                            ...selectedTodo,\n                            title: e.target.value\n                        })}\n                        fullWidth\n                    />\n                    <TextField\n                        id=\"limit\"\n                        label=\"期限\"\n                        type=\"date\"\n                        fullWidth\n                        value={selectedTodo.limit}\n                        className={classes.textField}\n                        InputLabelProps={{\n                        shrink: true,\n                        }}\n                        onChange={e => setSelectedTodo({\n                            ...selectedTodo,\n                            limit: e.target.value\n                        })}\n                    />\n                    <FormControl className={classes.formControl}>\n                        <InputLabel id=\"demo-simple-select-label\">状態</InputLabel>\n                        <Select\n                            fullWidth\n                            labelId=\"demo-simple-select-label\"\n                            id=\"status\"\n                            value={status}\n                            onChange={handleChange}\n                        >\n                            <MenuItem value={\"未着手\"}>未着手</MenuItem>\n                            <MenuItem value={\"途中\"}>途中</MenuItem>\n                            <MenuItem value={\"完了\"}>完了</MenuItem>\n                        </Select>\n                    </FormControl>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={onTodoDelete} color=\"secondary\">\n                        削除\n                    </Button>\n                    <Button onClick={handleClose} color=\"primary\">\n                        キャンセル\n                    </Button>\n                    <Button onClick={onTodoSubmit} color=\"primary\">\n                        追加\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\n\nexport default FormDialog;\n","/Users/kazu150/Documents/90_menta/13_todo/src/components/Todo.js",["27","28","29","30"],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":1,"column":29,"nodeType":"37","messageId":"38","endLine":1,"endColumn":37},{"ruleId":"35","severity":1,"message":"39","line":8,"column":18,"nodeType":"37","messageId":"38","endLine":8,"endColumn":25},{"ruleId":"35","severity":1,"message":"40","line":8,"column":27,"nodeType":"37","messageId":"38","endLine":8,"endColumn":31},{"ruleId":"35","severity":1,"message":"41","line":8,"column":42,"nodeType":"37","messageId":"38","endLine":8,"endColumn":54},{"ruleId":"35","severity":1,"message":"42","line":8,"column":73,"nodeType":"37","messageId":"38","endLine":8,"endColumn":79},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'setRows' is assigned a value but never used.","'open' is assigned a value but never used.","'selectedTodo' is assigned a value but never used.","'status' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]